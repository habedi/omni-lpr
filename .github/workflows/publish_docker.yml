name: Publish Docker Images

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: read
  packages: write

jobs:

  call_tests:
    uses: ./.github/workflows/tests.yml

  build_and_publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image_type: [ cpu, openvino, cuda ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-${{ matrix.image_type }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Set Fallback Tag (`latest`)
        id: fallback
        run: |
          if [ -z "${{ steps.meta.outputs.tags }}" ]; then
            echo "tags=ghcr.io/${{ github.repository }}-${{ matrix.image_type }}:latest" >> $GITHUB_OUTPUT
          else
            # Ensure tags value is trimmed and only the first tag is used if there are multiple
            first_tag=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
            echo "tags=${first_tag}" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.fallback.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BACKEND=${{ matrix.image_type }}
